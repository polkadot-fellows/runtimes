// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `snowbridge_pallet_outbound_queue_v2`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-08-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `2ad593906341`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/bridge-hub-polkadot-runtime/bridge_hub_polkadot_runtime.wasm
// --pallet=snowbridge_pallet_outbound_queue_v2
// --header=/_work/fellowship-001/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./system-parachains/bridge-hubs/bridge-hub-polkadot/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `snowbridge_pallet_outbound_queue_v2`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> snowbridge_pallet_outbound_queue_v2::WeightInfo for WeightInfo<T> {
	/// Storage: `EthereumOutboundQueueV2::MessageLeaves` (r:1 w:1)
	/// Proof: `EthereumOutboundQueueV2::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumOutboundQueueV2::Nonce` (r:1 w:1)
	/// Proof: `EthereumOutboundQueueV2::Nonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EthereumOutboundQueueV2::Messages` (r:1 w:1)
	/// Proof: `EthereumOutboundQueueV2::Messages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumOutboundQueueV2::PendingOrders` (r:0 w:1)
	/// Proof: `EthereumOutboundQueueV2::PendingOrders` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn do_process_message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1527`
		// Minimum execution time: 29_270_000 picoseconds.
		Weight::from_parts(32_300_000, 0)
			.saturating_add(Weight::from_parts(0, 1527))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `EthereumOutboundQueueV2::MessageLeaves` (r:1 w:0)
	/// Proof: `EthereumOutboundQueueV2::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn commit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1128`
		//  Estimated: `2613`
		// Minimum execution time: 41_250_000 picoseconds.
		Weight::from_parts(43_509_000, 0)
			.saturating_add(Weight::from_parts(0, 2613))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `EthereumOutboundQueueV2::MessageLeaves` (r:1 w:0)
	/// Proof: `EthereumOutboundQueueV2::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn commit_single() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135`
		//  Estimated: `1620`
		// Minimum execution time: 12_489_000 picoseconds.
		Weight::from_parts(13_500_000, 0)
			.saturating_add(Weight::from_parts(0, 1620))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `EthereumOutboundQueueV2::MessageLeaves` (r:0 w:1)
	/// Proof: `EthereumOutboundQueueV2::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumOutboundQueueV2::Messages` (r:0 w:1)
	/// Proof: `EthereumOutboundQueueV2::Messages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_640_000 picoseconds.
		Weight::from_parts(2_070_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `EthereumOutboundQueueV2::Nonce` (r:1 w:1)
	/// Proof: `EthereumOutboundQueueV2::Nonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EthereumOutboundQueueV2::PendingOrders` (r:0 w:32)
	/// Proof: `EthereumOutboundQueueV2::PendingOrders` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `EthereumOutboundQueueV2::MessageLeaves` (r:0 w:1)
	/// Proof: `EthereumOutboundQueueV2::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumOutboundQueueV2::Messages` (r:0 w:1)
	/// Proof: `EthereumOutboundQueueV2::Messages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn process() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `1493`
		// Minimum execution time: 783_750_000 picoseconds.
		Weight::from_parts(817_659_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(35))
	}
	/// Storage: `EthereumBeaconClient::LatestFinalizedBlockRoot` (r:1 w:0)
	/// Proof: `EthereumBeaconClient::LatestFinalizedBlockRoot` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EthereumBeaconClient::FinalizedBeaconState` (r:1 w:0)
	/// Proof: `EthereumBeaconClient::FinalizedBeaconState` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: UNKNOWN KEY `0xaed97c7854d601808b98ae43079dafb3` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xaed97c7854d601808b98ae43079dafb3` (r:1 w:0)
	/// Storage: `EthereumOutboundQueueV2::PendingOrders` (r:1 w:1)
	/// Proof: `EthereumOutboundQueueV2::PendingOrders` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn submit_delivery_receipt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `3762`
		// Minimum execution time: 93_000_000 picoseconds.
		Weight::from_parts(96_539_000, 0)
			.saturating_add(Weight::from_parts(0, 3762))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
