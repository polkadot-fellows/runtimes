// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_xcm_benchmarks::generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-01-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./collectives-polkadot-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot-parachain
// benchmark
// pallet
// --chain=./collectives-polkadot-chain-spec.json
// --steps=50
// --repeat=20
// --pallet=pallet_xcm_benchmarks::generic
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./collectives-polkadot-weights/xcm/pallet_xcm_benchmarks_generic.rs
// --header=./file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_xcm_benchmarks::generic`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo<T> {
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
    /// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn report_holding() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `212`
        //  Estimated: `6196`
        // Minimum execution time: 69_821_000 picoseconds.
        Weight::from_parts(71_130_000, 0)
            .saturating_add(Weight::from_parts(0, 6196))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    pub(crate) fn buy_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 890_000 picoseconds.
        Weight::from_parts(970_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    /// Storage: `PolkadotXcm::Queries` (r:1 w:0)
    /// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn query_response() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `3465`
        // Minimum execution time: 7_530_000 picoseconds.
        Weight::from_parts(7_710_000, 0)
            .saturating_add(Weight::from_parts(0, 3465))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    pub(crate) fn transact() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_160_000 picoseconds.
        Weight::from_parts(9_450_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn refund_surplus() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_830_000 picoseconds.
        Weight::from_parts(1_930_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn set_error_handler() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 960_000 picoseconds.
        Weight::from_parts(1_000_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn set_appendix() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_000 picoseconds.
        Weight::from_parts(960_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn clear_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 780_000 picoseconds.
        Weight::from_parts(860_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn descend_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 920_000 picoseconds.
        Weight::from_parts(1_000_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn clear_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 820_000 picoseconds.
        Weight::from_parts(900_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
    /// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn report_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `212`
        //  Estimated: `6196`
        // Minimum execution time: 64_900_000 picoseconds.
        Weight::from_parts(65_791_000, 0)
            .saturating_add(Weight::from_parts(0, 6196))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `PolkadotXcm::AssetTraps` (r:1 w:1)
    /// Proof: `PolkadotXcm::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn claim_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `23`
        //  Estimated: `3488`
        // Minimum execution time: 11_440_000 picoseconds.
        Weight::from_parts(11_700_000, 0)
            .saturating_add(Weight::from_parts(0, 3488))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    pub(crate) fn trap() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 820_000 picoseconds.
        Weight::from_parts(880_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    /// Storage: `PolkadotXcm::VersionNotifyTargets` (r:1 w:1)
    /// Proof: `PolkadotXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
    /// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn subscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `3507`
        // Minimum execution time: 31_201_000 picoseconds.
        Weight::from_parts(31_810_000, 0)
            .saturating_add(Weight::from_parts(0, 3507))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `PolkadotXcm::VersionNotifyTargets` (r:0 w:1)
    /// Proof: `PolkadotXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn unsubscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_690_000 picoseconds.
        Weight::from_parts(3_800_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    pub(crate) fn burn_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_470_000 picoseconds.
        Weight::from_parts(1_580_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn expect_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_020_000 picoseconds.
        Weight::from_parts(1_090_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn expect_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 850_000 picoseconds.
        Weight::from_parts(930_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn expect_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 820_000 picoseconds.
        Weight::from_parts(890_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn expect_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_010_000 picoseconds.
        Weight::from_parts(1_080_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
    /// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn query_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `212`
        //  Estimated: `6196`
        // Minimum execution time: 72_950_000 picoseconds.
        Weight::from_parts(73_611_000, 0)
            .saturating_add(Weight::from_parts(0, 6196))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    pub(crate) fn expect_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_530_000 picoseconds.
        Weight::from_parts(6_730_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
    /// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn report_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `212`
        //  Estimated: `6196`
        // Minimum execution time: 65_030_000 picoseconds.
        Weight::from_parts(65_860_000, 0)
            .saturating_add(Weight::from_parts(0, 6196))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    pub(crate) fn clear_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_000 picoseconds.
        Weight::from_parts(980_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn set_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 800_000 picoseconds.
        Weight::from_parts(870_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn clear_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 830_000 picoseconds.
        Weight::from_parts(870_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn set_fees_mode() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 760_000 picoseconds.
        Weight::from_parts(830_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    pub(crate) fn unpaid_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 830_000 picoseconds.
        Weight::from_parts(910_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
}