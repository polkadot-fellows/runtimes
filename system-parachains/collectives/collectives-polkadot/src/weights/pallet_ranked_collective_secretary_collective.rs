// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_ranked_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-11-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Jesses-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/collectives-polkadot-runtime/collectives_polkadot_runtime.compact.compressed.wasm
// --pallet
// pallet-ranked-collective
// --extrinsic
// 
// --output=pallet_ranked_collective_secretary_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ranked_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ranked_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `SecretaryCollective::Members` (r:1 w:1)
	/// Proof: `SecretaryCollective::Members` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::MemberCount` (r:1 w:1)
	/// Proof: `SecretaryCollective::MemberCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IndexToId` (r:0 w:1)
	/// Proof: `SecretaryCollective::IndexToId` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IdToIndex` (r:0 w:1)
	/// Proof: `SecretaryCollective::IdToIndex` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `SecretaryCollective::Members` (r:1 w:1)
	/// Proof: `SecretaryCollective::Members` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::MemberCount` (r:11 w:11)
	/// Proof: `SecretaryCollective::MemberCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IdToIndex` (r:11 w:22)
	/// Proof: `SecretaryCollective::IdToIndex` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IndexToId` (r:11 w:22)
	/// Proof: `SecretaryCollective::IndexToId` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	/// The range of component `r` is `[0, 10]`.
	/// The range of component `r` is `[0, 10]`.
	fn remove_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415 + r * (213 ±0)`
		//  Estimated: `3519 + r * (2529 ±0)`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(58_425_563, 0)
			.saturating_add(Weight::from_parts(0, 3519))
			// Standard Error: 420_534
			.saturating_add(Weight::from_parts(17_382_102, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2529).saturating_mul(r.into()))
	}
	/// Storage: `SecretaryCollective::Members` (r:1 w:1)
	/// Proof: `SecretaryCollective::Members` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::MemberCount` (r:1 w:1)
	/// Proof: `SecretaryCollective::MemberCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IndexToId` (r:0 w:1)
	/// Proof: `SecretaryCollective::IndexToId` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IdToIndex` (r:0 w:1)
	/// Proof: `SecretaryCollective::IdToIndex` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	/// The range of component `r` is `[0, 10]`.
	/// The range of component `r` is `[0, 10]`.
	fn promote_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `214 + r * (17 ±0)`
		//  Estimated: `3507`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(21_988_269, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			// Standard Error: 57_513
			.saturating_add(Weight::from_parts(684_453, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `SecretaryCollective::Members` (r:1 w:1)
	/// Proof: `SecretaryCollective::Members` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::MemberCount` (r:1 w:1)
	/// Proof: `SecretaryCollective::MemberCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IdToIndex` (r:1 w:2)
	/// Proof: `SecretaryCollective::IdToIndex` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IndexToId` (r:1 w:2)
	/// Proof: `SecretaryCollective::IndexToId` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[0, 10]`.
	/// The range of component `r` is `[0, 10]`.
	/// The range of component `r` is `[0, 10]`.
	fn demote_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430 + r * (72 ±0)`
		//  Estimated: `3519`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(37_046_559, 0)
			.saturating_add(Weight::from_parts(0, 3519))
			// Standard Error: 108_970
			.saturating_add(Weight::from_parts(1_323_622, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `SecretaryCollective::Members` (r:1 w:0)
	/// Proof: `SecretaryCollective::Members` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `209`
		//  Estimated: `3507`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `SecretaryCollective::VotingCleanup` (r:1 w:0)
	/// Proof: `SecretaryCollective::VotingCleanup` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	fn cleanup_poll(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607 + n * (1 ±0)`
		//  Estimated: `3579`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(21_486_534, 0)
			.saturating_add(Weight::from_parts(0, 3579))
			// Standard Error: 7_810
			.saturating_add(Weight::from_parts(66_925, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `SecretaryCollective::Members` (r:2 w:2)
	/// Proof: `SecretaryCollective::Members` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::MemberCount` (r:2 w:2)
	/// Proof: `SecretaryCollective::MemberCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IdToIndex` (r:2 w:4)
	/// Proof: `SecretaryCollective::IdToIndex` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `SecretarySalary::Claimant` (r:2 w:2)
	/// Proof: `SecretarySalary::Claimant` (`max_values`: None, `max_size`: Some(86), added: 2561, mode: `MaxEncodedLen`)
	/// Storage: `SecretaryCollective::IndexToId` (r:0 w:2)
	/// Proof: `SecretaryCollective::IndexToId` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn exchange_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `6112`
		// Minimum execution time: 57_000_000 picoseconds.
		Weight::from_parts(65_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6112))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(12))
	}
}
