// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6309bce852e6`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/asset-hub-kusama-runtime/asset_hub_kusama_runtime.wasm
// --pallet=pallet_revive
// --header=/_work/fellowship-001/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./system-parachains/asset-hubs/asset-hub-kusama/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_revive`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_revive::WeightInfo for WeightInfo<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 2_860_000 picoseconds.
		Weight::from_parts(3_120_000, 0)
			.saturating_add(Weight::from_parts(0, 1594))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430 + k * (69 ±0)`
		//  Estimated: `420 + k * (70 ±0)`
		// Minimum execution time: 15_691_000 picoseconds.
		Weight::from_parts(12_777_932, 0)
			.saturating_add(Weight::from_parts(0, 420))
			// Standard Error: 1_555
			.saturating_add(Weight::from_parts(1_489_035, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `747 + c * (1 ±0)`
		//  Estimated: `6684 + c * (1 ±0)`
		// Minimum execution time: 98_369_000 picoseconds.
		Weight::from_parts(142_139_441, 0)
			.saturating_add(Weight::from_parts(0, 6684))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(1_694, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `b` is `[0, 1]`.
	fn basic_block_compilation(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4082`
		//  Estimated: `10022`
		// Minimum execution time: 142_360_000 picoseconds.
		Weight::from_parts(149_285_108, 0)
			.saturating_add(Weight::from_parts(0, 10022))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `6245`
		// Minimum execution time: 1_411_446_000 picoseconds.
		Weight::from_parts(267_821_750, 0)
			.saturating_add(Weight::from_parts(0, 6245))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(19_809, 0).saturating_mul(c.into()))
			// Standard Error: 14
			.saturating_add(Weight::from_parts(4_555, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1214`
		//  Estimated: `4667`
		// Minimum execution time: 200_799_000 picoseconds.
		Weight::from_parts(215_549_122, 0)
			.saturating_add(Weight::from_parts(0, 4667))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(4_584, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Revive::OriginalAccount` (r:2 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1383`
		//  Estimated: `7323`
		// Minimum execution time: 100_440_000 picoseconds.
		Weight::from_parts(102_950_000, 0)
			.saturating_add(Weight::from_parts(0, 7323))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 104857]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 58_791_000 picoseconds.
		Weight::from_parts(66_870_046, 0)
			.saturating_add(Weight::from_parts(0, 3574))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(14_665, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `282`
		//  Estimated: `3747`
		// Minimum execution time: 48_060_000 picoseconds.
		Weight::from_parts(49_289_000, 0)
			.saturating_add(Weight::from_parts(0, 3747))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `521`
		//  Estimated: `6461`
		// Minimum execution time: 23_630_000 picoseconds.
		Weight::from_parts(24_550_000, 0)
			.saturating_add(Weight::from_parts(0, 6461))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `Measured`)
	fn map_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 56_270_000 picoseconds.
		Weight::from_parts(57_130_000, 0)
			.saturating_add(Weight::from_parts(0, 3574))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `Measured`)
	/// Storage: `Revive::OriginalAccount` (r:0 w:1)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn unmap_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `3520`
		// Minimum execution time: 44_370_000 picoseconds.
		Weight::from_parts(45_370_000, 0)
			.saturating_add(Weight::from_parts(0, 3520))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn dispatch_as_fallback_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_300_000 picoseconds.
		Weight::from_parts(6_570_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_459_000 picoseconds.
		Weight::from_parts(7_062_758, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 272
			.saturating_add(Weight::from_parts(172_344, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_141_000 picoseconds.
		Weight::from_parts(1_209_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_090_000 picoseconds.
		Weight::from_parts(1_240_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	fn seal_is_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306`
		//  Estimated: `3771`
		// Minimum execution time: 7_260_000 picoseconds.
		Weight::from_parts(7_709_000, 0)
			.saturating_add(Weight::from_parts(0, 3771))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	fn seal_to_account_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `269`
		//  Estimated: `3734`
		// Minimum execution time: 7_231_000 picoseconds.
		Weight::from_parts(7_640_000, 0)
			.saturating_add(Weight::from_parts(0, 3734))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `402`
		//  Estimated: `3867`
		// Minimum execution time: 8_080_000 picoseconds.
		Weight::from_parts(8_611_000, 0)
			.saturating_add(Weight::from_parts(0, 3867))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 270_000 picoseconds.
		Weight::from_parts(430_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_code_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470`
		//  Estimated: `3935`
		// Minimum execution time: 11_760_000 picoseconds.
		Weight::from_parts(12_450_000, 0)
			.saturating_add(Weight::from_parts(0, 3935))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 360_000 picoseconds.
		Weight::from_parts(420_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 310_000 picoseconds.
		Weight::from_parts(390_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 320_000 picoseconds.
		Weight::from_parts(381_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 700_000 picoseconds.
		Weight::from_parts(891_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_ref_time_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(340_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `0`
		// Minimum execution time: 5_930_000 picoseconds.
		Weight::from_parts(6_120_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `272`
		//  Estimated: `3737`
		// Minimum execution time: 9_450_000 picoseconds.
		Weight::from_parts(9_860_000, 0)
			.saturating_add(Weight::from_parts(0, 3737))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238 + n * (1 ±0)`
		//  Estimated: `3703 + n * (1 ±0)`
		// Minimum execution time: 6_409_000 picoseconds.
		Weight::from_parts(7_264_486, 0)
			.saturating_add(Weight::from_parts(0, 3703))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(974, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_940_000 picoseconds.
		Weight::from_parts(3_485_861, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(780, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 290_000 picoseconds.
		Weight::from_parts(380_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(360_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_return_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 260_000 picoseconds.
		Weight::from_parts(340_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_call_data_size() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 280_000 picoseconds.
		Weight::from_parts(360_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 510_000 picoseconds.
		Weight::from_parts(580_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 310_000 picoseconds.
		Weight::from_parts(360_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_base_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 310_000 picoseconds.
		Weight::from_parts(410_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 250_000 picoseconds.
		Weight::from_parts(390_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Aura::Authorities` (r:1 w:0)
	/// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn seal_block_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `343`
		//  Estimated: `1828`
		// Minimum execution time: 31_750_000 picoseconds.
		Weight::from_parts(32_640_000, 0)
			.saturating_add(Weight::from_parts(0, 1828))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `Measured`)
	fn seal_block_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `3495`
		// Minimum execution time: 4_051_000 picoseconds.
		Weight::from_parts(4_370_000, 0)
			.saturating_add(Weight::from_parts(0, 3495))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 320_000 picoseconds.
		Weight::from_parts(360_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_950_000 picoseconds.
		Weight::from_parts(2_340_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_copy_to_contract(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 581_000 picoseconds.
		Weight::from_parts(928_994, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(309, 0).saturating_mul(n.into()))
	}
	fn seal_call_data_load() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 339_000 picoseconds.
		Weight::from_parts(380_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_call_data_copy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 309_000 picoseconds.
		Weight::from_parts(341_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(157, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 320_000 picoseconds.
		Weight::from_parts(517_216, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(308, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	fn seal_terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `3803`
		// Minimum execution time: 18_439_000 picoseconds.
		Weight::from_parts(18_951_000, 0)
			.saturating_add(Weight::from_parts(0, 3803))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 416]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_430_000 picoseconds.
		Weight::from_parts(5_196_479, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 9_812
			.saturating_add(Weight::from_parts(438_270, 0).saturating_mul(t.into()))
			// Standard Error: 107
			.saturating_add(Weight::from_parts(2_157, 0).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `653`
		// Minimum execution time: 9_760_000 picoseconds.
		Weight::from_parts(14_590_000, 0)
			.saturating_add(Weight::from_parts(0, 653))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10663`
		//  Estimated: `10663`
		// Minimum execution time: 46_040_000 picoseconds.
		Weight::from_parts(47_700_000, 0)
			.saturating_add(Weight::from_parts(0, 10663))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `653`
		// Minimum execution time: 10_410_000 picoseconds.
		Weight::from_parts(11_290_000, 0)
			.saturating_add(Weight::from_parts(0, 653))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10663`
		//  Estimated: `10663`
		// Minimum execution time: 47_860_000 picoseconds.
		Weight::from_parts(49_940_000, 0)
			.saturating_add(Weight::from_parts(0, 10663))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_storage(_n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + o * (1 ±0)`
		//  Estimated: `252 + o * (1 ±0)`
		// Minimum execution time: 11_230_000 picoseconds.
		Weight::from_parts(14_335_084, 0)
			.saturating_add(Weight::from_parts(0, 252))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 10_830_000 picoseconds.
		Weight::from_parts(11_908_087, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 99
			.saturating_add(Weight::from_parts(545, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 9_421_000 picoseconds.
		Weight::from_parts(10_805_594, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 87
			.saturating_add(Weight::from_parts(1_664, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 9_240_000 picoseconds.
		Weight::from_parts(10_120_620, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 151
			.saturating_add(Weight::from_parts(859, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `252 + n * (1 ±0)`
		// Minimum execution time: 11_450_000 picoseconds.
		Weight::from_parts(12_742_330, 0)
			.saturating_add(Weight::from_parts(0, 252))
			// Standard Error: 141
			.saturating_add(Weight::from_parts(1_849, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_980_000 picoseconds.
		Weight::from_parts(2_080_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_350_000 picoseconds.
		Weight::from_parts(2_531_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_830_000 picoseconds.
		Weight::from_parts(1_990_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_080_000 picoseconds.
		Weight::from_parts(2_210_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_380_000 picoseconds.
		Weight::from_parts(1_581_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 416]`.
	/// The range of component `o` is `[0, 416]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_770_000 picoseconds.
		Weight::from_parts(3_195_955, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 33
			.saturating_add(Weight::from_parts(402, 0).saturating_mul(n.into()))
			// Standard Error: 33
			.saturating_add(Weight::from_parts(307, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_740_000 picoseconds.
		Weight::from_parts(3_215_548, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 80
			.saturating_add(Weight::from_parts(329, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_get_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_381_000 picoseconds.
		Weight::from_parts(2_820_317, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_contains_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_170_000 picoseconds.
		Weight::from_parts(2_688_740, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 416]`.
	fn seal_take_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_029_000 picoseconds.
		Weight::from_parts(3_411_453, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(209, 0).saturating_mul(n.into()))
	}
	/// Storage: `Revive::OriginalAccount` (r:1 w:0)
	/// Proof: `Revive::OriginalAccount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1289 + t * (275 ±0)`
		//  Estimated: `4754 + t * (2514 ±0)`
		// Minimum execution time: 37_790_000 picoseconds.
		Weight::from_parts(39_376_087, 0)
			.saturating_add(Weight::from_parts(0, 4754))
			// Standard Error: 76_191
			.saturating_add(Weight::from_parts(9_208_143, 0).saturating_mul(t.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2514).saturating_mul(t.into()))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1234`
		//  Estimated: `4699`
		// Minimum execution time: 32_839_000 picoseconds.
		Weight::from_parts(34_890_000, 0)
			.saturating_add(Weight::from_parts(0, 4699))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(242), added: 2717, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1329`
		//  Estimated: `4784`
		// Minimum execution time: 151_830_000 picoseconds.
		Weight::from_parts(163_890_709, 0)
			.saturating_add(Weight::from_parts(0, 4784))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(4_301, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_060_000 picoseconds.
		Weight::from_parts(1_297_648, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 5
			.saturating_add(Weight::from_parts(4_304, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn identity(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 310_000 picoseconds.
		Weight::from_parts(543_442, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(155, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn ripemd_160(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 770_000 picoseconds.
		Weight::from_parts(536_367, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_274, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_140_000 picoseconds.
		Weight::from_parts(2_843_339, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(4_113, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 700_000 picoseconds.
		Weight::from_parts(1_200_913, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_476, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 749_000 picoseconds.
		Weight::from_parts(897_202, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_481, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 66_251_000 picoseconds.
		Weight::from_parts(70_145_588, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(5_648, 0).saturating_mul(n.into()))
	}
	fn ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 45_470_000 picoseconds.
		Weight::from_parts(46_040_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn bn128_add() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 16_640_000 picoseconds.
		Weight::from_parts(16_960_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn bn128_mul() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_062_949_000 picoseconds.
		Weight::from_parts(1_068_167_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 1365]`.
	fn bn128_pairing(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_351_548_000 picoseconds.
		Weight::from_parts(13_493_571_771, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 11_517
			.saturating_add(Weight::from_parts(12_868, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1200]`.
	fn blake2f(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 421_000 picoseconds.
		Weight::from_parts(518_062, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(31_186, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_669_000 picoseconds.
		Weight::from_parts(13_080_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `298`
		//  Estimated: `3763`
		// Minimum execution time: 12_730_000 picoseconds.
		Weight::from_parts(13_459_000, 0)
			.saturating_add(Weight::from_parts(0, 3763))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `r` is `[0, 10000]`.
	fn instr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_009_000 picoseconds.
		Weight::from_parts(41_638_508, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 483
			.saturating_add(Weight::from_parts(125_892, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 100000]`.
	fn instr_empty_loop(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_870_000 picoseconds.
		Weight::from_parts(1_626_693, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 50
			.saturating_add(Weight::from_parts(76_868, 0).saturating_mul(r.into()))
	}
}
