
//! Autogenerated weights for `pallet_society`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-09-03, STEPS: `10`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `cob`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/asset-hub-kusama-runtime/asset_hub_kusama_runtime.wasm
// --pallet
// pallet_society
// --extrinsic
// *
// --output=./system-parachains/asset-hubs/asset-hub-kusama/src/weights
// --repeat=2
// --steps=10

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_society`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_society::WeightInfo for WeightInfo<T> {
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(49666), added: 50161, mode: `MaxEncodedLen`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `444`
		//  Estimated: `51151`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(33_000_000, 0)
			.saturating_add(Weight::from_parts(0, 51151))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(49666), added: 50161, mode: `MaxEncodedLen`)
	fn unbid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `461`
		//  Estimated: `51151`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_000_000, 0)
			.saturating_add(Weight::from_parts(0, 51151))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(49666), added: 50161, mode: `MaxEncodedLen`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:2 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn vouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `51151`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 0)
			.saturating_add(Weight::from_parts(0, 51151))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(49666), added: 50161, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn unvouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `51151`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 0)
			.saturating_add(Weight::from_parts(0, 51151))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Votes` (r:1 w:1)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `3591`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3591))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Defending` (r:1 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: Some(72), added: 567, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	fn defender_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
		//  Estimated: `3522`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(27_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3522))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1897`
		//  Estimated: `3682`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3682))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn waive_repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547`
		//  Estimated: `3682`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3682))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Head` (r:1 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `Society::Founder` (r:0 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn found_society() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `1517`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `Society::Founder` (r:1 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:5 w:5)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:5 w:5)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `Society::Votes` (r:4 w:4)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `Society::Candidates` (r:4 w:4)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::Head` (r:0 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Defending` (r:0 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: Some(72), added: 567, mode: `MaxEncodedLen`)
	/// Storage: `Society::ChallengeRoundCount` (r:0 w:1)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::Skeptic` (r:0 w:1)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Pot` (r:0 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:0 w:1)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::Bids` (r:0 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(49666), added: 50161, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	/// Storage: `Society::NextHead` (r:0 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: Some(52), added: 547, mode: `MaxEncodedLen`)
	fn dissolve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
		//  Estimated: `13635`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(62_000_000, 0)
			.saturating_add(Weight::from_parts(0, 13635))
			.saturating_add(T::DbWeight::get().reads(20))
			.saturating_add(T::DbWeight::get().writes(30))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:1)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Payouts` (r:1 w:0)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `Society::Pot` (r:1 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn judge_suspended_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3682`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3682))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberCount` (r:1 w:0)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn set_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
		//  Estimated: `1517`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:1 w:0)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Votes` (r:1 w:0)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn punish_skeptic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `707`
		//  Estimated: `3591`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(28_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3591))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: Some(52), added: 547, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1440`
		//  Estimated: `3593`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(51_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: Some(52), added: 547, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn bestow_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1458`
		//  Estimated: `3593`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(43_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn kick_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2813`
		//  Estimated: `6196`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(44_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn resign_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2787`
		//  Estimated: `6196`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(46_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn drop_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2795`
		//  Estimated: `6196`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(48_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	/// Storage: `Society::VoteClearCursor` (r:1 w:0)
	/// Proof: `Society::VoteClearCursor` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `Society::Votes` (r:2 w:2)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	fn cleanup_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552`
		//  Estimated: `6110`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6110))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	fn cleanup_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `3522`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3522))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(49666), added: 50161, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn poke_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `51151`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(25_000_000, 0)
			.saturating_add(Weight::from_parts(0, 51151))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
