// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_remote_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-01-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./asset-hub-kusama-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot-parachain
// benchmark
// pallet
// --chain=./asset-hub-kusama-chain-spec.json
// --steps=50
// --repeat=20
// --pallet=pallet_remote_proxy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./asset-hub-kusama-weights/
// --header=./file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_remote_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_remote_proxy::WeightInfo for WeightInfo<T> {
    /// Storage: `RemoteProxyRelayChain::BlockToRoot` (r:1 w:0)
    /// Proof: `RemoteProxyRelayChain::BlockToRoot` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
    fn remote_proxy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `73`
        //  Estimated: `3509`
        // Minimum execution time: 23_880_000 picoseconds.
        Weight::from_parts(24_480_000, 0)
            .saturating_add(Weight::from_parts(0, 3509))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    fn register_remote_proxy_proof() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_540_000 picoseconds.
        Weight::from_parts(4_680_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
    }
    /// Storage: `RemoteProxyRelayChain::BlockToRoot` (r:1 w:0)
    /// Proof: `RemoteProxyRelayChain::BlockToRoot` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
    fn remote_proxy_with_registered_proof() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `73`
        //  Estimated: `3509`
        // Minimum execution time: 23_950_000 picoseconds.
        Weight::from_parts(24_310_000, 0)
            .saturating_add(Weight::from_parts(0, 3509))
            .saturating_add(T::DbWeight::get().reads(1))
    }
}
