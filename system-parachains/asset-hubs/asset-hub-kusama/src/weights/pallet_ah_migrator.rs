// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_ah_migrator`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `2ddf44ef9c0d`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/asset-hub-kusama-runtime/asset_hub_kusama_runtime.wasm
// --pallet=pallet_ah_migrator
// --header=/_work/fellowship-001/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./system-parachains/asset-hubs/asset-hub-kusama/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ah_migrator`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ah_migrator::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_multisigs(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16771 + n * (537 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 62_019_000 picoseconds.
		Weight::from_parts(91_539_924, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 35_058
			.saturating_add(Weight::from_parts(24_569_491, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:255 w:255)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:255 w:255)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:255 w:255)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_accounts(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `33892 + n * (956 ±0)`
		//  Estimated: `990 + n * (3774 ±0)`
		// Minimum execution time: 183_269_000 picoseconds.
		Weight::from_parts(186_660_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 159_892
			.saturating_add(Weight::from_parts(156_141_032, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3774).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_liquid_accounts(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16771 + n * (537 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 75_519_000 picoseconds.
		Weight::from_parts(60_861_963, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 70_931
			.saturating_add(Weight::from_parts(40_075_507, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `Claims::Vesting` (r:255 w:255)
	/// Proof: `Claims::Vesting` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_claims(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `990 + n * (2531 ±0)`
		// Minimum execution time: 29_160_000 picoseconds.
		Weight::from_parts(22_478_283, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 18_142
			.saturating_add(Weight::from_parts(4_537_181, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(n.into()))
	}
	/// Storage: `Proxy::Proxies` (r:255 w:255)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_proxy_proxies(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `990 + n * (3716 ±0)`
		// Minimum execution time: 33_190_000 picoseconds.
		Weight::from_parts(16_350_452, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 19_034
			.saturating_add(Weight::from_parts(8_922_290, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3716).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_proxy_announcements(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16771 + n * (537 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 75_100_000 picoseconds.
		Weight::from_parts(59_139_218, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 106_640
			.saturating_add(Weight::from_parts(28_051_534, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `Vesting::Vesting` (r:255 w:255)
	/// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
	/// Storage: `Vesting::StorageVersion` (r:0 w:1)
	/// Proof: `Vesting::StorageVersion` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_vesting_schedules(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `990 + n * (3532 ±0)`
		// Minimum execution time: 35_020_000 picoseconds.
		Weight::from_parts(55_589_338, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 28_931
			.saturating_add(Weight::from_parts(7_542_561, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3532).saturating_mul(n.into()))
	}
	/// Storage: `NominationPools::SubPoolsStorage` (r:255 w:255)
	/// Proof: `NominationPools::SubPoolsStorage` (`max_values`: None, `max_size`: Some(1197), added: 3672, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForSubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::CounterForSubPoolsStorage` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_nom_pools_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `1489 + n * (3672 ±0)`
		// Minimum execution time: 38_490_000 picoseconds.
		Weight::from_parts(27_274_638, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 24_351
			.saturating_add(Weight::from_parts(9_677_039, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3672).saturating_mul(n.into()))
	}
	/// Storage: `Referenda::DecidingCount` (r:0 w:16)
	/// Proof: `Referenda::DecidingCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::ReferendumCount` (r:0 w:1)
	/// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::TrackQueue` (r:0 w:16)
	/// Proof: `Referenda::TrackQueue` (`max_values`: None, `max_size`: Some(2012), added: 4487, mode: `MaxEncodedLen`)
	fn receive_referenda_values() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 130_658_000 picoseconds.
		Weight::from_parts(167_228_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(33))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Preimage::StatusFor` (r:1 w:0)
	/// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	/// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 4000000]`.
	fn receive_single_active_referendums(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `144 + m * (1 ±0)`
		//  Estimated: `3609 + m * (1 ±0)`
		// Minimum execution time: 30_529_000 picoseconds.
		Weight::from_parts(189_541_751, 0)
			.saturating_add(Weight::from_parts(0, 3609))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(4_333, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(m.into()))
	}
	/// Storage: `Referenda::ReferendumInfoFor` (r:0 w:255)
	/// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_complete_referendums(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 24_240_000 picoseconds.
		Weight::from_parts(33_971_177, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 10_873
			.saturating_add(Weight::from_parts(3_073_826, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Preimage::StatusFor` (r:1 w:0)
	/// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Parameters::Parameters` (r:1 w:0)
	/// Proof: `Parameters::Parameters` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:0 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 4000000]`.
	fn receive_single_scheduler_agenda(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + m * (1 ±0)`
		//  Estimated: `3612 + m * (1 ±0)`
		// Minimum execution time: 52_050_000 picoseconds.
		Weight::from_parts(242_078_004, 0)
			.saturating_add(Weight::from_parts(0, 3612))
			// Standard Error: 9
			.saturating_add(Weight::from_parts(4_225, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(m.into()))
	}
	/// Storage: `Scheduler::Lookup` (r:0 w:255)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_scheduler_lookup(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 26_430_000 picoseconds.
		Weight::from_parts(20_129_721, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4_675
			.saturating_add(Weight::from_parts(2_620_720, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `VoterList::ListNodes` (r:255 w:255)
	/// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_bags_list_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16361 + n * (438 ±0)`
		//  Estimated: `1489 + n * (2629 ±0)`
		// Minimum execution time: 46_520_000 picoseconds.
		Weight::from_parts(116_021_704, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 25_763
			.saturating_add(Weight::from_parts(10_000_957, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2629).saturating_mul(n.into()))
	}
	/// Storage: `Indices::Accounts` (r:255 w:255)
	/// Proof: `Indices::Accounts` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_indices(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `990 + n * (2544 ±0)`
		// Minimum execution time: 29_550_000 picoseconds.
		Weight::from_parts(49_614_384, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 15_481
			.saturating_add(Weight::from_parts(4_891_345, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2544).saturating_mul(n.into()))
	}
	/// Storage: `ConvictionVoting::VotingFor` (r:0 w:255)
	/// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_conviction_voting_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 48_149_000 picoseconds.
		Weight::from_parts(49_460_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 22_223
			.saturating_add(Weight::from_parts(26_856_579, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Bounties::Bounties` (r:0 w:255)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(177), added: 2652, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_bounties_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 26_580_000 picoseconds.
		Weight::from_parts(25_508_911, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 6_569
			.saturating_add(Weight::from_parts(2_958_863, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AssetRate::ConversionRateToNative` (r:0 w:255)
	/// Proof: `AssetRate::ConversionRateToNative` (`max_values`: None, `max_size`: Some(1238), added: 3713, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_asset_rates(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 27_090_000 picoseconds.
		Weight::from_parts(28_780_415, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 12_285
			.saturating_add(Weight::from_parts(4_911_476, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AhOps::RcCrowdloanContribution` (r:255 w:255)
	/// Proof: `AhOps::RcCrowdloanContribution` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_crowdloan_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `990 + n * (2587 ±0)`
		// Minimum execution time: 51_210_000 picoseconds.
		Weight::from_parts(61_282_755, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 97_445
			.saturating_add(Weight::from_parts(27_812_830, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2587).saturating_mul(n.into()))
	}
	/// Storage: `Referenda::MetadataOf` (r:0 w:255)
	/// Proof: `Referenda::MetadataOf` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_referenda_metadata(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 26_780_000 picoseconds.
		Weight::from_parts(35_757_053, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 14_272
			.saturating_add(Weight::from_parts(2_646_446, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Treasury::Spends` (r:0 w:255)
	/// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(2456), added: 4931, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_treasury_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 34_979_000 picoseconds.
		Weight::from_parts(56_513_460, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 13_868
			.saturating_add(Weight::from_parts(8_883_415, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `DelegatedStaking::Agents` (r:255 w:255)
	/// Proof: `DelegatedStaking::Agents` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `DelegatedStaking::CounterForAgents` (r:1 w:1)
	/// Proof: `DelegatedStaking::CounterForAgents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_delegated_staking_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1489 + n * (2595 ±0)`
		// Minimum execution time: 33_340_000 picoseconds.
		Weight::from_parts(39_973_866, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 15_242
			.saturating_add(Weight::from_parts(5_839_348, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2595).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_preimage_legacy_status(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16771 + n * (537 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 64_550_000 picoseconds.
		Weight::from_parts(114_174_346, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 35_887
			.saturating_add(Weight::from_parts(24_587_932, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `Preimage::RequestStatusFor` (r:255 w:0)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_preimage_request_status(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `57 + n * (47 ±0)`
		//  Estimated: `990 + n * (2566 ±0)`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(25_027_103, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 42_937
			.saturating_add(Weight::from_parts(10_664_813, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2566).saturating_mul(n.into()))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// The range of component `m` is `[1, 80]`.
	fn receive_preimage_chunk(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (49900 ±0)`
		//  Estimated: `3469 + m * (48969 ±24)`
		// Minimum execution time: 70_590_000 picoseconds.
		Weight::from_parts(2_544_873, 0)
			.saturating_add(Weight::from_parts(0, 3469))
			// Standard Error: 182_588
			.saturating_add(Weight::from_parts(63_803_018, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 48969).saturating_mul(m.into()))
	}
	/// Storage: `ChildBounties::ChildBountyDescriptionsV1` (r:0 w:100)
	/// Proof: `ChildBounties::ChildBountyDescriptionsV1` (`max_values`: None, `max_size`: Some(16412), added: 18887, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn receive_child_bounties_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 43_430_000 picoseconds.
		Weight::from_parts(31_294_330, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 64_715
			.saturating_add(Weight::from_parts(22_271_117, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Staking::UnappliedSlashes` (r:0 w:100)
	/// Proof: `Staking::UnappliedSlashes` (`max_values`: None, `max_size`: Some(24735), added: 27210, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn receive_staking_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 63_919_000 picoseconds.
		Weight::from_parts(16_354_211, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 55_547
			.saturating_add(Weight::from_parts(41_926_466, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationStartBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationStartBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn force_set_stage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1486`
		// Minimum execution time: 22_960_000 picoseconds.
		Weight::from_parts(29_209_000, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	/// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	/// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	/// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhBalancesBefore` (r:0 w:1)
	/// Proof: `AhMigrator::AhBalancesBefore` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationStartBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationStartBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1461`
		//  Estimated: `4926`
		// Minimum execution time: 79_319_000 picoseconds.
		Weight::from_parts(83_940_000, 0)
			.saturating_add(Weight::from_parts(0, 4926))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `AhMigrator::AhBalancesBefore` (r:1 w:0)
	/// Proof: `AhMigrator::AhBalancesBefore` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationEndBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationEndBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn finish_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `1517`
		// Minimum execution time: 33_051_000 picoseconds.
		Weight::from_parts(36_290_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AhMigrator::DmpQueuePriorityConfig` (r:1 w:0)
	/// Proof: `AhMigrator::DmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::BookStateFor` (r:1 w:0)
	/// Proof: `MessageQueue::BookStateFor` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::ServiceHead` (r:0 w:1)
	/// Proof: `MessageQueue::ServiceHead` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	fn force_dmp_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `3517`
		// Minimum execution time: 20_870_000 picoseconds.
		Weight::from_parts(22_080_000, 0)
			.saturating_add(Weight::from_parts(0, 3517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AhMigrator::DmpQueuePriorityConfig` (r:1 w:1)
	/// Proof: `AhMigrator::DmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	fn set_dmp_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1494`
		// Minimum execution time: 12_909_000 picoseconds.
		Weight::from_parts(13_840_000, 0)
			.saturating_add(Weight::from_parts(0, 1494))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AhMigrator::Manager` (r:1 w:1)
	/// Proof: `AhMigrator::Manager` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1517`
		// Minimum execution time: 12_889_000 picoseconds.
		Weight::from_parts(13_711_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
