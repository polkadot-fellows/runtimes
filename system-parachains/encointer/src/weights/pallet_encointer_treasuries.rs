//! Autogenerated weights for `pallet_encointer_treasuries`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-01-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./encointer-kusama-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./polkadot-omni-node-stable2412-runtime-benchmarks
// benchmark
// pallet
// --chain
// ./encointer-kusama-chain-spec.json
// --pallet=pallet-encointer-treasuries
// --extrinsic=*
// --output
// pallet_encointer_treasuries.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_encointer_treasuries`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_encointer_treasuries::WeightInfo for WeightInfo<T> {
	/// Storage: `EncointerTreasuries::SwapNativeOptions` (r:1 w:1)
	/// Proof: `EncointerTreasuries::SwapNativeOptions` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::Balance` (r:2 w:2)
	/// Proof: `EncointerBalances::Balance` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::DemurragePerBlock` (r:1 w:0)
	/// Proof: `EncointerBalances::DemurragePerBlock` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn swap_native() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `733`
		//  Estimated: `6196`
		// Minimum execution time: 70_344_000 picoseconds.
		Weight::from_parts(72_445_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
}
