
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("encointer-rococo-local-dev"), DB CACHE: 1024

// Executed Command:
// target/release/encointer-collator
// benchmark
// pallet
// --chain=encointer-rococo-local-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=polkadot-parachains/encointer-runtime/src/weights/pallet_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: Collective Members (r:1 w:1)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Proposals (r:1 w:0)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Voting (r:100 w:100)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (3190 ±0)`
		//  Estimated: `15728 + m * (1967 ±24) + p * (4332 ±24)`
		// Minimum execution time: 12_612_000 picoseconds.
		Weight::from_parts(12_817_000, 0)
			.saturating_add(Weight::from_parts(0, 15728))
			// Standard Error: 54_992
			.saturating_add(Weight::from_parts(4_313_092, 0).saturating_mul(m.into()))
			// Standard Error: 54_992
			.saturating_add(Weight::from_parts(6_586_060, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1967).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 4332).saturating_mul(p.into()))
	}
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69 + m * (32 ±0)`
		//  Estimated: `1555 + m * (32 ±0)`
		// Minimum execution time: 13_615_000 picoseconds.
		Weight::from_parts(13_294_322, 0)
			.saturating_add(Weight::from_parts(0, 1555))
			// Standard Error: 24
			.saturating_add(Weight::from_parts(1_137, 0).saturating_mul(b.into()))
			// Standard Error: 250
			.saturating_add(Weight::from_parts(9_446, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:1 w:0)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69 + m * (32 ±0)`
		//  Estimated: `3535 + m * (32 ±0)`
		// Minimum execution time: 16_050_000 picoseconds.
		Weight::from_parts(15_173_364, 0)
			.saturating_add(Weight::from_parts(0, 3535))
			// Standard Error: 43
			.saturating_add(Weight::from_parts(1_403, 0).saturating_mul(b.into()))
			// Standard Error: 453
			.saturating_add(Weight::from_parts(18_210, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:1 w:1)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Proposals (r:1 w:1)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalCount (r:1 w:1)
	/// Proof Skipped: Collective ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Voting (r:0 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + m * (32 ±0) + p * (36 ±0)`
		//  Estimated: `3751 + m * (33 ±0) + p * (36 ±0)`
		// Minimum execution time: 22_203_000 picoseconds.
		Weight::from_parts(22_610_277, 0)
			.saturating_add(Weight::from_parts(0, 3751))
			// Standard Error: 95
			.saturating_add(Weight::from_parts(2_707, 0).saturating_mul(b.into()))
			// Standard Error: 1_000
			.saturating_add(Weight::from_parts(23_109, 0).saturating_mul(m.into()))
			// Standard Error: 988
			.saturating_add(Weight::from_parts(189_590, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Voting (r:1 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `808 + m * (64 ±0)`
		//  Estimated: `4272 + m * (64 ±0)`
		// Minimum execution time: 22_632_000 picoseconds.
		Weight::from_parts(23_889_147, 0)
			.saturating_add(Weight::from_parts(0, 4272))
			// Standard Error: 1_170
			.saturating_add(Weight::from_parts(34_147, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Collective Voting (r:1 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Proposals (r:1 w:1)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:0 w:1)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3842 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 25_176_000 picoseconds.
		Weight::from_parts(26_526_585, 0)
			.saturating_add(Weight::from_parts(0, 3842))
			// Standard Error: 1_143
			.saturating_add(Weight::from_parts(19_843, 0).saturating_mul(m.into()))
			// Standard Error: 1_114
			.saturating_add(Weight::from_parts(185_128, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: Collective Voting (r:1 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:1 w:1)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Proposals (r:1 w:1)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `699 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4016 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 35_905_000 picoseconds.
		Weight::from_parts(37_097_894, 0)
			.saturating_add(Weight::from_parts(0, 4016))
			// Standard Error: 155
			.saturating_add(Weight::from_parts(2_460, 0).saturating_mul(b.into()))
			// Standard Error: 1_638
			.saturating_add(Weight::from_parts(25_075, 0).saturating_mul(m.into()))
			// Standard Error: 1_597
			.saturating_add(Weight::from_parts(220_820, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: Collective Voting (r:1 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:1 w:0)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Proposals (r:1 w:1)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:0 w:1)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `417 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3862 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 27_232_000 picoseconds.
		Weight::from_parts(28_648_248, 0)
			.saturating_add(Weight::from_parts(0, 3862))
			// Standard Error: 921
			.saturating_add(Weight::from_parts(27_951, 0).saturating_mul(m.into()))
			// Standard Error: 898
			.saturating_add(Weight::from_parts(183_334, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: Collective Voting (r:1 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Members (r:1 w:0)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:1 w:0)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:1 w:1)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective Proposals (r:1 w:1)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `719 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4036 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 37_906_000 picoseconds.
		Weight::from_parts(41_399_461, 0)
			.saturating_add(Weight::from_parts(0, 4036))
			// Standard Error: 124
			.saturating_add(Weight::from_parts(1_721, 0).saturating_mul(b.into()))
			// Standard Error: 1_311
			.saturating_add(Weight::from_parts(22_182, 0).saturating_mul(m.into()))
			// Standard Error: 1_278
			.saturating_add(Weight::from_parts(214_365, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: Collective Proposals (r:1 w:1)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Voting (r:0 w:1)
	/// Proof Skipped: Collective Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: Collective ProposalOf (r:0 w:1)
	/// Proof Skipped: Collective ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226 + p * (32 ±0)`
		//  Estimated: `1711 + p * (32 ±0)`
		// Minimum execution time: 13_796_000 picoseconds.
		Weight::from_parts(15_669_737, 0)
			.saturating_add(Weight::from_parts(0, 1711))
			// Standard Error: 1_075
			.saturating_add(Weight::from_parts(172_017, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
}
