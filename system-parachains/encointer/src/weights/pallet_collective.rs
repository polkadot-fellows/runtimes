// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `f1a166470727`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/encointer-kusama-runtime/encointer_kusama_runtime.wasm
// --pallet=pallet_collective
// --header=/_work/fellowship-001/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./system-parachains/encointer/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `Collective::Members` (r:1 w:1)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:0)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:100 w:100)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Prime` (r:0 w:1)
	/// Proof: `Collective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (3190 ±0)`
		//  Estimated: `15762 + m * (1967 ±23) + p * (4332 ±23)`
		// Minimum execution time: 19_230_000 picoseconds.
		Weight::from_parts(19_621_000, 0)
			.saturating_add(Weight::from_parts(0, 15762))
			// Standard Error: 94_939
			.saturating_add(Weight::from_parts(6_897_305, 0).saturating_mul(m.into()))
			// Standard Error: 94_939
			.saturating_add(Weight::from_parts(11_937_139, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1967).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 4332).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + m * (32 ±0)`
		//  Estimated: `1589 + m * (32 ±0)`
		// Minimum execution time: 17_010_000 picoseconds.
		Weight::from_parts(16_213_521, 0)
			.saturating_add(Weight::from_parts(0, 1589))
			// Standard Error: 58
			.saturating_add(Weight::from_parts(1_971, 0).saturating_mul(b.into()))
			// Standard Error: 606
			.saturating_add(Weight::from_parts(18_589, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:0)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + m * (32 ±0)`
		//  Estimated: `3569 + m * (32 ±0)`
		// Minimum execution time: 19_960_000 picoseconds.
		Weight::from_parts(19_231_635, 0)
			.saturating_add(Weight::from_parts(0, 3569))
			// Standard Error: 89
			.saturating_add(Weight::from_parts(2_315, 0).saturating_mul(b.into()))
			// Standard Error: 920
			.saturating_add(Weight::from_parts(32_820, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalCount` (r:1 w:1)
	/// Proof: `Collective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:0 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393 + m * (32 ±0) + p * (36 ±0)`
		//  Estimated: `3785 + m * (33 ±0) + p * (36 ±0)`
		// Minimum execution time: 27_200_000 picoseconds.
		Weight::from_parts(26_249_117, 0)
			.saturating_add(Weight::from_parts(0, 3785))
			// Standard Error: 283
			.saturating_add(Weight::from_parts(4_872, 0).saturating_mul(b.into()))
			// Standard Error: 2_957
			.saturating_add(Weight::from_parts(56_919, 0).saturating_mul(m.into()))
			// Standard Error: 2_920
			.saturating_add(Weight::from_parts(289_036, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `842 + m * (64 ±0)`
		//  Estimated: `4306 + m * (64 ±0)`
		// Minimum execution time: 31_589_000 picoseconds.
		Weight::from_parts(33_764_626, 0)
			.saturating_add(Weight::from_parts(0, 4306))
			// Standard Error: 1_976
			.saturating_add(Weight::from_parts(56_908, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:0 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `431 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3876 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 34_549_000 picoseconds.
		Weight::from_parts(34_978_964, 0)
			.saturating_add(Weight::from_parts(0, 3876))
			// Standard Error: 2_263
			.saturating_add(Weight::from_parts(43_224, 0).saturating_mul(m.into()))
			// Standard Error: 2_206
			.saturating_add(Weight::from_parts(256_616, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `733 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4050 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 49_120_000 picoseconds.
		Weight::from_parts(47_333_149, 0)
			.saturating_add(Weight::from_parts(0, 4050))
			// Standard Error: 231
			.saturating_add(Weight::from_parts(4_242, 0).saturating_mul(b.into()))
			// Standard Error: 2_449
			.saturating_add(Weight::from_parts(41_714, 0).saturating_mul(m.into()))
			// Standard Error: 2_387
			.saturating_add(Weight::from_parts(286_532, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Prime` (r:1 w:0)
	/// Proof: `Collective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:0 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3896 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 37_130_000 picoseconds.
		Weight::from_parts(39_188_054, 0)
			.saturating_add(Weight::from_parts(0, 3896))
			// Standard Error: 3_197
			.saturating_add(Weight::from_parts(51_143, 0).saturating_mul(m.into()))
			// Standard Error: 3_117
			.saturating_add(Weight::from_parts(236_281, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Prime` (r:1 w:0)
	/// Proof: `Collective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4070 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 49_430_000 picoseconds.
		Weight::from_parts(51_602_909, 0)
			.saturating_add(Weight::from_parts(0, 4070))
			// Standard Error: 340
			.saturating_add(Weight::from_parts(3_621, 0).saturating_mul(b.into()))
			// Standard Error: 3_597
			.saturating_add(Weight::from_parts(35_446, 0).saturating_mul(m.into()))
			// Standard Error: 3_506
			.saturating_add(Weight::from_parts(293_666, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:0 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:0 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + p * (32 ±0)`
		//  Estimated: `1745 + p * (32 ±0)`
		// Minimum execution time: 16_499_000 picoseconds.
		Weight::from_parts(18_588_284, 0)
			.saturating_add(Weight::from_parts(0, 1745))
			// Standard Error: 1_610
			.saturating_add(Weight::from_parts(250_153, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::CostOf` (r:1 w:0)
	/// Proof: `Collective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:0 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `p` is `[1, 100]`.
	fn kill(d: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1531 + p * (36 ±0)`
		//  Estimated: `4930 + d * (123 ±6) + p * (37 ±0)`
		// Minimum execution time: 26_280_000 picoseconds.
		Weight::from_parts(30_474_560, 0)
			.saturating_add(Weight::from_parts(0, 4930))
			// Standard Error: 113_359
			.saturating_add(Weight::from_parts(866_458, 0).saturating_mul(d.into()))
			// Standard Error: 1_755
			.saturating_add(Weight::from_parts(268_406, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 123).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `Collective::ProposalOf` (r:1 w:0)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::CostOf` (r:1 w:0)
	/// Proof: `Collective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn release_proposal_cost() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `945`
		//  Estimated: `4410`
		// Minimum execution time: 19_160_000 picoseconds.
		Weight::from_parts(20_170_000, 0)
			.saturating_add(Weight::from_parts(0, 4410))
			.saturating_add(T::DbWeight::get().reads(2))
	}
}
