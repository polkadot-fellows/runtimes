// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-12-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./encointer-kusama-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot-parachain
// benchmark
// pallet
// --chain=./encointer-kusama-chain-spec.json
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./encointer-kusama-weights/
// --header=./file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `Collective::Members` (r:1 w:1)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:0)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:100 w:100)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Prime` (r:0 w:1)
	/// Proof: `Collective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (3190 ±0)`
		//  Estimated: `15762 + m * (1967 ±24) + p * (4332 ±24)`
		// Minimum execution time: 21_690_000 picoseconds.
		Weight::from_parts(21_900_000, 0)
			.saturating_add(Weight::from_parts(0, 15762))
			// Standard Error: 79_615
			.saturating_add(Weight::from_parts(6_008_365, 0).saturating_mul(m.into()))
			// Standard Error: 79_615
			.saturating_add(Weight::from_parts(10_898_789, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1967).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 4332).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + m * (32 ±0)`
		//  Estimated: `1589 + m * (32 ±0)`
		// Minimum execution time: 19_360_000 picoseconds.
		Weight::from_parts(18_498_931, 0)
			.saturating_add(Weight::from_parts(0, 1589))
			// Standard Error: 15
			.saturating_add(Weight::from_parts(1_336, 0).saturating_mul(b.into()))
			// Standard Error: 160
			.saturating_add(Weight::from_parts(13_498, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:0)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103 + m * (32 ±0)`
		//  Estimated: `3569 + m * (32 ±0)`
		// Minimum execution time: 22_530_000 picoseconds.
		Weight::from_parts(21_614_714, 0)
			.saturating_add(Weight::from_parts(0, 3569))
			// Standard Error: 18
			.saturating_add(Weight::from_parts(1_544, 0).saturating_mul(b.into()))
			// Standard Error: 191
			.saturating_add(Weight::from_parts(21_121, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalCount` (r:1 w:1)
	/// Proof: `Collective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:0 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `393 + m * (32 ±0) + p * (36 ±0)`
		//  Estimated: `3785 + m * (33 ±0) + p * (36 ±0)`
		// Minimum execution time: 28_550_000 picoseconds.
		Weight::from_parts(30_583_484, 0)
			.saturating_add(Weight::from_parts(0, 3785))
			// Standard Error: 96
			.saturating_add(Weight::from_parts(2_672, 0).saturating_mul(b.into()))
			// Standard Error: 1_008
			.saturating_add(Weight::from_parts(22_188, 0).saturating_mul(m.into()))
			// Standard Error: 996
			.saturating_add(Weight::from_parts(183_458, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `842 + m * (64 ±0)`
		//  Estimated: `4306 + m * (64 ±0)`
		// Minimum execution time: 29_870_000 picoseconds.
		Weight::from_parts(30_713_416, 0)
			.saturating_add(Weight::from_parts(0, 4306))
			// Standard Error: 588
			.saturating_add(Weight::from_parts(28_381, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:0 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `431 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3876 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 32_090_000 picoseconds.
		Weight::from_parts(33_715_427, 0)
			.saturating_add(Weight::from_parts(0, 3876))
			// Standard Error: 865
			.saturating_add(Weight::from_parts(22_691, 0).saturating_mul(m.into()))
			// Standard Error: 843
			.saturating_add(Weight::from_parts(169_759, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `733 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4050 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 44_600_000 picoseconds.
		Weight::from_parts(48_878_548, 0)
			.saturating_add(Weight::from_parts(0, 4050))
			// Standard Error: 265
			.saturating_add(Weight::from_parts(2_449, 0).saturating_mul(b.into()))
			// Standard Error: 2_731
			.saturating_add(Weight::from_parts(220_968, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Prime` (r:1 w:0)
	/// Proof: `Collective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:0 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3896 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 35_190_000 picoseconds.
		Weight::from_parts(36_330_026, 0)
			.saturating_add(Weight::from_parts(0, 3896))
			// Standard Error: 840
			.saturating_add(Weight::from_parts(28_990, 0).saturating_mul(m.into()))
			// Standard Error: 820
			.saturating_add(Weight::from_parts(169_281, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Voting` (r:1 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Members` (r:1 w:0)
	/// Proof: `Collective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Prime` (r:1 w:0)
	/// Proof: `Collective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:1 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4070 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 47_101_000 picoseconds.
		Weight::from_parts(50_463_075, 0)
			.saturating_add(Weight::from_parts(0, 4070))
			// Standard Error: 180
			.saturating_add(Weight::from_parts(2_661, 0).saturating_mul(b.into()))
			// Standard Error: 1_907
			.saturating_add(Weight::from_parts(25_577, 0).saturating_mul(m.into()))
			// Standard Error: 1_859
			.saturating_add(Weight::from_parts(215_016, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `Collective::Proposals` (r:1 w:1)
	/// Proof: `Collective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::Voting` (r:0 w:1)
	/// Proof: `Collective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Collective::ProposalOf` (r:0 w:1)
	/// Proof: `Collective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + p * (32 ±0)`
		//  Estimated: `1745 + p * (32 ±0)`
		// Minimum execution time: 19_300_000 picoseconds.
		Weight::from_parts(20_745_932, 0)
			.saturating_add(Weight::from_parts(0, 1745))
			// Standard Error: 585
			.saturating_add(Weight::from_parts(153_060, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
}
