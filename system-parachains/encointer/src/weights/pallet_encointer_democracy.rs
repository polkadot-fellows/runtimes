
//! Autogenerated weights for `pallet_encointer_democracy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Pieros-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// target/release/encointer-node-notee
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_encointer_democracy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtime/src/weights/pallet_encointer_democracy.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_encointer_democracy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_encointer_democracy::WeightInfo for WeightInfo<T> {
    /// Storage: `EncointerDemocracy::EnactmentQueue` (r:1 w:0)
    /// Proof: `EncointerDemocracy::EnactmentQueue` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
    /// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
    /// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `EncointerDemocracy::ProposalCount` (r:1 w:1)
    /// Proof: `EncointerDemocracy::ProposalCount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `EncointerDemocracy::Proposals` (r:0 w:1)
    /// Proof: `EncointerDemocracy::Proposals` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
    /// Storage: `EncointerDemocracy::Tallies` (r:0 w:1)
    /// Proof: `EncointerDemocracy::Tallies` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
    fn submit_proposal() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `169`
        //  Estimated: `3507`
        // Minimum execution time: 37_000_000 picoseconds.
        Weight::from_parts(38_000_000, 0)
            .saturating_add(Weight::from_parts(0, 3507))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `EncointerDemocracy::Tallies` (r:1 w:1)
    /// Proof: `EncointerDemocracy::Tallies` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
    /// Storage: `EncointerDemocracy::Proposals` (r:1 w:1)
    /// Proof: `EncointerDemocracy::Proposals` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
    /// Storage: `EncointerCeremonies::ReputationLifetime` (r:1 w:0)
    /// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `EncointerDemocracy::VoteEntries` (r:3 w:3)
    /// Proof: `EncointerDemocracy::VoteEntries` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
    /// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
    /// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `EncointerCeremonies::ParticipantReputation` (r:3 w:0)
    /// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `EncointerDemocracy::CancelledAtBlock` (r:1 w:0)
    /// Proof: `EncointerDemocracy::CancelledAtBlock` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// Storage: `EncointerCeremonies::GlobalReputationCount` (r:5 w:0)
    /// Proof: `EncointerCeremonies::GlobalReputationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn vote() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `805`
        //  Estimated: `14170`
        // Minimum execution time: 143_000_000 picoseconds.
        Weight::from_parts(145_000_000, 0)
            .saturating_add(Weight::from_parts(0, 14170))
            .saturating_add(T::DbWeight::get().reads(16))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `EncointerDemocracy::Proposals` (r:1 w:1)
    /// Proof: `EncointerDemocracy::Proposals` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
    /// Storage: `EncointerDemocracy::CancelledAtBlock` (r:1 w:1)
    /// Proof: `EncointerDemocracy::CancelledAtBlock` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// Storage: `EncointerDemocracy::Tallies` (r:1 w:0)
    /// Proof: `EncointerDemocracy::Tallies` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
    /// Storage: `EncointerCeremonies::ReputationLifetime` (r:1 w:0)
    /// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `EncointerCeremonies::GlobalReputationCount` (r:5 w:0)
    /// Proof: `EncointerCeremonies::GlobalReputationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `EncointerDemocracy::EnactmentQueue` (r:0 w:1)
    /// Proof: `EncointerDemocracy::EnactmentQueue` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
    fn update_proposal_state() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `503`
        //  Estimated: `13868`
        // Minimum execution time: 112_000_000 picoseconds.
        Weight::from_parts(113_000_000, 0)
            .saturating_add(Weight::from_parts(0, 13868))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
