
//! Autogenerated weights for `pallet_encointer_communities`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("encointer-rococo-local-dev"), DB CACHE: 1024

// Executed Command:
// target/release/encointer-collator
// benchmark
// pallet
// --chain=encointer-rococo-local-dev
// --steps=50
// --repeat=20
// --pallet=pallet_encointer_communities
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=polkadot-parachains/encointer-runtime/src/weights/pallet_encointer_communities.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_encointer_communities`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_encointer_communities::WeightInfo for WeightInfo<T> {
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:1)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities MaxSpeedMps (r:1 w:0)
	/// Proof: EncointerCommunities MaxSpeedMps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities MinSolarTripTimeS (r:1 w:0)
	/// Proof: EncointerCommunities MinSolarTripTimeS (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityIdentifiersByGeohash (r:1 w:1)
	/// Proof: EncointerCommunities CommunityIdentifiersByGeohash (max_values: None, max_size: Some(90007), added: 92482, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities Locations (r:1 w:1)
	/// Proof: EncointerCommunities Locations (max_values: None, max_size: Some(320032), added: 322507, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities NominalIncome (r:0 w:1)
	/// Proof: EncointerCommunities NominalIncome (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityMetadata (r:0 w:1)
	/// Proof: EncointerCommunities CommunityMetadata (max_values: None, max_size: Some(1352), added: 3827, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities Bootstrappers (r:0 w:1)
	/// Proof: EncointerCommunities Bootstrappers (max_values: None, max_size: Some(320027), added: 322502, mode: MaxEncodedLen)
	/// Storage: EncointerBalances DemurragePerBlock (r:0 w:1)
	/// Proof: EncointerBalances DemurragePerBlock (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn new_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6448`
		//  Estimated: `323497`
		// Minimum execution time: 5_643_876_000 picoseconds.
		Weight::from_parts(5_676_264_000, 0)
			.saturating_add(Weight::from_parts(0, 323497))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: EncointerScheduler CurrentPhase (r:1 w:0)
	/// Proof: EncointerScheduler CurrentPhase (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:0)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities MaxSpeedMps (r:1 w:0)
	/// Proof: EncointerCommunities MaxSpeedMps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities MinSolarTripTimeS (r:1 w:0)
	/// Proof: EncointerCommunities MinSolarTripTimeS (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityIdentifiersByGeohash (r:1 w:0)
	/// Proof: EncointerCommunities CommunityIdentifiersByGeohash (max_values: None, max_size: Some(90007), added: 92482, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities Locations (r:1 w:1)
	/// Proof: EncointerCommunities Locations (max_values: None, max_size: Some(320032), added: 322507, mode: MaxEncodedLen)
	fn add_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6521`
		//  Estimated: `323497`
		// Minimum execution time: 5_627_080_000 picoseconds.
		Weight::from_parts(5_682_831_000, 0)
			.saturating_add(Weight::from_parts(0, 323497))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerScheduler CurrentPhase (r:1 w:0)
	/// Proof: EncointerScheduler CurrentPhase (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:0)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities Locations (r:1 w:1)
	/// Proof: EncointerCommunities Locations (max_values: None, max_size: Some(320032), added: 322507, mode: MaxEncodedLen)
	fn remove_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6500`
		//  Estimated: `323497`
		// Minimum execution time: 37_629_000 picoseconds.
		Weight::from_parts(39_837_000, 0)
			.saturating_add(Weight::from_parts(0, 323497))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:0)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityMetadata (r:0 w:1)
	/// Proof: EncointerCommunities CommunityMetadata (max_values: None, max_size: Some(1352), added: 3827, mode: MaxEncodedLen)
	fn update_community_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `221`
		//  Estimated: `91487`
		// Minimum execution time: 16_765_000 picoseconds.
		Weight::from_parts(17_226_000, 0)
			.saturating_add(Weight::from_parts(0, 91487))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:0)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerBalances DemurragePerBlock (r:0 w:1)
	/// Proof: EncointerBalances DemurragePerBlock (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn update_demurrage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `221`
		//  Estimated: `91487`
		// Minimum execution time: 14_259_000 picoseconds.
		Weight::from_parts(14_985_000, 0)
			.saturating_add(Weight::from_parts(0, 91487))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:0)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities NominalIncome (r:0 w:1)
	/// Proof: EncointerCommunities NominalIncome (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn update_nominal_income() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `221`
		//  Estimated: `91487`
		// Minimum execution time: 14_959_000 picoseconds.
		Weight::from_parts(15_675_000, 0)
			.saturating_add(Weight::from_parts(0, 91487))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerCommunities MinSolarTripTimeS (r:0 w:1)
	/// Proof: EncointerCommunities MinSolarTripTimeS (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_min_solar_trip_time_s() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_071_000 picoseconds.
		Weight::from_parts(8_746_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerCommunities MaxSpeedMps (r:0 w:1)
	/// Proof: EncointerCommunities MaxSpeedMps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_max_speed_mps() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_080_000 picoseconds.
		Weight::from_parts(8_636_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: EncointerCommunities Locations (r:2 w:1)
	/// Proof: EncointerCommunities Locations (max_values: None, max_size: Some(320032), added: 322507, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityIdentifiersByGeohash (r:1 w:1)
	/// Proof: EncointerCommunities CommunityIdentifiersByGeohash (max_values: None, max_size: Some(90007), added: 92482, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityIdentifiers (r:1 w:1)
	/// Proof: EncointerCommunities CommunityIdentifiers (max_values: Some(1), max_size: Some(90002), added: 90497, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities NominalIncome (r:0 w:1)
	/// Proof: EncointerCommunities NominalIncome (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities CommunityMetadata (r:0 w:1)
	/// Proof: EncointerCommunities CommunityMetadata (max_values: None, max_size: Some(1352), added: 3827, mode: MaxEncodedLen)
	/// Storage: EncointerCommunities Bootstrappers (r:0 w:1)
	/// Proof: EncointerCommunities Bootstrappers (max_values: None, max_size: Some(320027), added: 322502, mode: MaxEncodedLen)
	fn purge_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `482`
		//  Estimated: `646004`
		// Minimum execution time: 45_935_000 picoseconds.
		Weight::from_parts(47_790_000, 0)
			.saturating_add(Weight::from_parts(0, 646004))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
}
