// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//! Autogenerated weights for `pallet_encointer_ceremonies`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./encointer-kusama-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=./encointer-kusama-chain-spec.json
// --steps=50
// --repeat=20
// --pallet=pallet_encointer_ceremonies
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./encointer-kusama-weights/
// --header=./file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_encointer_ceremonies`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_encointer_ceremonies::WeightInfo for WeightInfo<T> {
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCommunities::CommunityIdentifiers` (r:1 w:0)
	/// Proof: `EncointerCommunities::CommunityIdentifiers` (`max_values`: Some(1), `max_size`: Some(90002), added: 90497, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::BootstrapperIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::BootstrapperIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseeIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::EndorseeIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::NewbieIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputationLifetime` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:1 w:2)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCommunities::Bootstrappers` (r:1 w:0)
	/// Proof: `EncointerCommunities::Bootstrappers` (`max_values`: None, `max_size`: Some(320027), added: 322502, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::TotalIssuance` (r:1 w:0)
	/// Proof: `EncointerBalances::TotalIssuance` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::DemurragePerBlock` (r:1 w:0)
	/// Proof: `EncointerBalances::DemurragePerBlock` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::ReputableCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableRegistry` (r:0 w:1)
	/// Proof: `EncointerCeremonies::ReputableRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_participant() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `979`
		//  Estimated: `323492`
		// Minimum execution time: 123_255_000 picoseconds.
		Weight::from_parts(126_132_000, 0)
			.saturating_add(Weight::from_parts(0, 323492))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCommunities::CommunityIdentifiers` (r:1 w:0)
	/// Proof: `EncointerCommunities::CommunityIdentifiers` (`max_values`: Some(1), `max_size`: Some(90002), added: 90497, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::BootstrapperIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::BootstrapperIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseeIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::EndorseeIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::NewbieIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::NewbieCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieRegistry` (r:1 w:1)
	/// Proof: `EncointerCeremonies::NewbieRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputationLifetime` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:1 w:2)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCommunities::Bootstrappers` (r:1 w:0)
	/// Proof: `EncointerCommunities::Bootstrappers` (`max_values`: None, `max_size`: Some(320027), added: 322502, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::TotalIssuance` (r:1 w:0)
	/// Proof: `EncointerBalances::TotalIssuance` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::DemurragePerBlock` (r:1 w:0)
	/// Proof: `EncointerBalances::DemurragePerBlock` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::ReputableCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableRegistry` (r:0 w:1)
	/// Proof: `EncointerCeremonies::ReputableRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn upgrade_registration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1257`
		//  Estimated: `323492`
		// Minimum execution time: 162_842_000 picoseconds.
		Weight::from_parts(166_339_000, 0)
			.saturating_add(Weight::from_parts(0, 323492))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCommunities::CommunityIdentifiers` (r:1 w:0)
	/// Proof: `EncointerCommunities::CommunityIdentifiers` (`max_values`: Some(1), `max_size`: Some(90002), added: 90497, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::BootstrapperIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::BootstrapperIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputationLifetime` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:1 w:2)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableRegistry` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister_participant() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1036`
		//  Estimated: `91487`
		// Minimum execution time: 65_885_000 picoseconds.
		Weight::from_parts(67_524_000, 0)
			.saturating_add(Weight::from_parts(0, 91487))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCommunities::CommunityIdentifiers` (r:1 w:0)
	/// Proof: `EncointerCommunities::CommunityIdentifiers` (`max_values`: Some(1), `max_size`: Some(90002), added: 90497, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::MeetupCount` (r:1 w:0)
	/// Proof: `EncointerCeremonies::MeetupCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AssignmentCounts` (r:1 w:0)
	/// Proof: `EncointerCeremonies::AssignmentCounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::Assignments` (r:1 w:0)
	/// Proof: `EncointerCeremonies::Assignments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::BootstrapperIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::BootstrapperIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableRegistry` (r:8 w:0)
	/// Proof: `EncointerCeremonies::ReputableRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieRegistry` (r:2 w:0)
	/// Proof: `EncointerCeremonies::NewbieRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCommunities::Locations` (r:2 w:0)
	/// Proof: `EncointerCommunities::Locations` (`max_values`: None, `max_size`: Some(320032), added: 322507, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::PhaseDurations` (r:1 w:0)
	/// Proof: `EncointerScheduler::PhaseDurations` (`max_values`: None, `max_size`: Some(25), added: 2500, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::NextPhaseTimestamp` (r:1 w:0)
	/// Proof: `EncointerScheduler::NextPhaseTimestamp` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::MeetupTimeOffset` (r:1 w:0)
	/// Proof: `EncointerCeremonies::MeetupTimeOffset` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AttestationCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::AttestationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AttestationIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::AttestationIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::MeetupParticipantCountVote` (r:0 w:1)
	/// Proof: `EncointerCeremonies::MeetupParticipantCountVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AttestationRegistry` (r:0 w:1)
	/// Proof: `EncointerCeremonies::AttestationRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn attest_attendees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2203`
		//  Estimated: `646004`
		// Minimum execution time: 141_654_000 picoseconds.
		Weight::from_parts(222_964_000, 0)
			.saturating_add(Weight::from_parts(0, 646004))
			.saturating_add(T::DbWeight::get().reads(25))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `EncointerCommunities::CommunityIdentifiers` (r:1 w:0)
	/// Proof: `EncointerCommunities::CommunityIdentifiers` (`max_values`: Some(1), `max_size`: Some(90002), added: 90497, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::ReputationLifetime` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::Endorsees` (r:2 w:1)
	/// Proof: `EncointerCeremonies::Endorsees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:2 w:0)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::BurnedReputableNewbieTickets` (r:1 w:1)
	/// Proof: `EncointerCeremonies::BurnedReputableNewbieTickets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorsementTicketsPerReputable` (r:1 w:0)
	/// Proof: `EncointerCeremonies::EndorsementTicketsPerReputable` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseeCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::EndorseeCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::NewbieIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::BootstrapperIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::BootstrapperIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseeIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::EndorseeIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::NewbieCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieRegistry` (r:1 w:1)
	/// Proof: `EncointerCeremonies::NewbieRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCommunities::Bootstrappers` (r:1 w:0)
	/// Proof: `EncointerCommunities::Bootstrappers` (`max_values`: None, `max_size`: Some(320027), added: 322502, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::TotalIssuance` (r:1 w:0)
	/// Proof: `EncointerBalances::TotalIssuance` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::DemurragePerBlock` (r:1 w:0)
	/// Proof: `EncointerBalances::DemurragePerBlock` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::EndorseeRegistry` (r:0 w:1)
	/// Proof: `EncointerCeremonies::EndorseeRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseesCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::EndorseesCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn endorse_newcomer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1281`
		//  Estimated: `323492`
		// Minimum execution time: 120_202_000 picoseconds.
		Weight::from_parts(122_203_000, 0)
			.saturating_add(Weight::from_parts(0, 323492))
			.saturating_add(T::DbWeight::get().reads(20))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerScheduler::CurrentCeremonyIndex` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentCeremonyIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::MeetupCount` (r:1 w:0)
	/// Proof: `EncointerCeremonies::MeetupCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AssignmentCounts` (r:1 w:0)
	/// Proof: `EncointerCeremonies::AssignmentCounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::Assignments` (r:1 w:0)
	/// Proof: `EncointerCeremonies::Assignments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::BootstrapperIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::BootstrapperIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::IssuedRewards` (r:1 w:1)
	/// Proof: `EncointerCeremonies::IssuedRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableRegistry` (r:8 w:0)
	/// Proof: `EncointerCeremonies::ReputableRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieRegistry` (r:2 w:0)
	/// Proof: `EncointerCeremonies::NewbieRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AttestationIndex` (r:10 w:0)
	/// Proof: `EncointerCeremonies::AttestationIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AttestationRegistry` (r:10 w:0)
	/// Proof: `EncointerCeremonies::AttestationRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::MeetupParticipantCountVote` (r:10 w:0)
	/// Proof: `EncointerCeremonies::MeetupParticipantCountVote` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCommunities::NominalIncome` (r:1 w:0)
	/// Proof: `EncointerCommunities::NominalIncome` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::CeremonyReward` (r:1 w:0)
	/// Proof: `EncointerCeremonies::CeremonyReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerBalances::Balance` (r:10 w:10)
	/// Proof: `EncointerBalances::Balance` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::DemurragePerBlock` (r:1 w:0)
	/// Proof: `EncointerBalances::DemurragePerBlock` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `EncointerBalances::TotalIssuance` (r:1 w:1)
	/// Proof: `EncointerBalances::TotalIssuance` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::ReputationCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::GlobalReputationCount` (r:1 w:1)
	/// Proof: `EncointerCeremonies::GlobalReputationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:0 w:10)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7832`
		//  Estimated: `33572`
		// Minimum execution time: 476_292_000 picoseconds.
		Weight::from_parts(495_059_000, 0)
			.saturating_add(Weight::from_parts(0, 33572))
			.saturating_add(T::DbWeight::get().reads(66))
			.saturating_add(T::DbWeight::get().writes(26))
	}
	/// Storage: `EncointerCeremonies::InactivityTimeout` (r:0 w:1)
	/// Proof: `EncointerCeremonies::InactivityTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inactivity_timeout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_152_000 picoseconds.
		Weight::from_parts(6_392_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerScheduler::CurrentPhase` (r:1 w:0)
	/// Proof: `EncointerScheduler::CurrentPhase` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::MeetupTimeOffset` (r:0 w:1)
	/// Proof: `EncointerCeremonies::MeetupTimeOffset` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_meetup_time_offset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `40`
		//  Estimated: `1486`
		// Minimum execution time: 8_121_000 picoseconds.
		Weight::from_parts(8_525_000, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerCeremonies::ReputationLifetime` (r:0 w:1)
	/// Proof: `EncointerCeremonies::ReputationLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_reputation_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_161_000 picoseconds.
		Weight::from_parts(6_444_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerCeremonies::EndorsementTicketsPerBootstrapper` (r:0 w:1)
	/// Proof: `EncointerCeremonies::EndorsementTicketsPerBootstrapper` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_endorsement_tickets_per_bootstrapper() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_128_000 picoseconds.
		Weight::from_parts(6_478_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerCeremonies::EndorsementTicketsPerReputable` (r:0 w:1)
	/// Proof: `EncointerCeremonies::EndorsementTicketsPerReputable` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_endorsement_tickets_per_reputable() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_951_000 picoseconds.
		Weight::from_parts(6_277_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerCeremonies::TimeTolerance` (r:0 w:1)
	/// Proof: `EncointerCeremonies::TimeTolerance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_time_tolerance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_196_000 picoseconds.
		Weight::from_parts(6_517_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerCeremonies::LocationTolerance` (r:0 w:1)
	/// Proof: `EncointerCeremonies::LocationTolerance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_location_tolerance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_123_000 picoseconds.
		Weight::from_parts(6_519_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `EncointerCeremonies::ReputableRegistry` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableIndex` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ReputableIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:1 w:1)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::Assignments` (r:0 w:1)
	/// Proof: `EncointerCeremonies::Assignments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::MeetupCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::MeetupCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::NewbieCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::NewbieCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputableCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::ReputableCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AssignmentCounts` (r:0 w:1)
	/// Proof: `EncointerCeremonies::AssignmentCounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::ReputationCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::ReputationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::BootstrapperCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::BootstrapperCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::AttestationCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::AttestationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseeCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::EndorseeCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::GlobalReputationCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::GlobalReputationCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerCeremonies::EndorseesCount` (r:0 w:1)
	/// Proof: `EncointerCeremonies::EndorseesCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn purge_community_ceremony() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `765`
		//  Estimated: `4230`
		// Minimum execution time: 84_133_000 picoseconds.
		Weight::from_parts(85_848_000, 0)
			.saturating_add(Weight::from_parts(0, 4230))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(14))
	}
}
