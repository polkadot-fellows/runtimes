// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//! Autogenerated weights for `pallet_encointer_faucet`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./encointer-kusama-chain-spec.json")`, DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=./encointer-kusama-chain-spec.json
// --steps=50
// --repeat=20
// --pallet=pallet_encointer_faucet
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./encointer-kusama-weights/
// --header=./file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_encointer_faucet`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_encointer_faucet::WeightInfo for WeightInfo<T> {
	/// Storage: `EncointerCommunities::CommunityIdentifiers` (r:1 w:0)
	/// Proof: `EncointerCommunities::CommunityIdentifiers` (`max_values`: Some(1), `max_size`: Some(90002), added: 90497, mode: `MaxEncodedLen`)
	/// Storage: `EncointerFaucet::Faucets` (r:1 w:1)
	/// Proof: `EncointerFaucet::Faucets` (`max_values`: None, `max_size`: Some(9373), added: 11848, mode: `MaxEncodedLen`)
	/// Storage: `EncointerFaucet::ReserveAmount` (r:1 w:0)
	/// Proof: `EncointerFaucet::ReserveAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `EncointerReputationCommitments::CurrentPurposeId` (r:1 w:1)
	/// Proof: `EncointerReputationCommitments::CurrentPurposeId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EncointerReputationCommitments::Purposes` (r:0 w:1)
	/// Proof: `EncointerReputationCommitments::Purposes` (`max_values`: None, `max_size`: Some(138), added: 2613, mode: `MaxEncodedLen`)
	fn create_faucet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460`
		//  Estimated: `91487`
		// Minimum execution time: 92_034_000 picoseconds.
		Weight::from_parts(94_800_000, 0)
			.saturating_add(Weight::from_parts(0, 91487))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `EncointerFaucet::Faucets` (r:1 w:0)
	/// Proof: `EncointerFaucet::Faucets` (`max_values`: None, `max_size`: Some(9373), added: 11848, mode: `MaxEncodedLen`)
	/// Storage: `EncointerReputationCommitments::Purposes` (r:1 w:0)
	/// Proof: `EncointerReputationCommitments::Purposes` (`max_values`: None, `max_size`: Some(138), added: 2613, mode: `MaxEncodedLen`)
	/// Storage: `EncointerCeremonies::ParticipantReputation` (r:1 w:0)
	/// Proof: `EncointerCeremonies::ParticipantReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EncointerReputationCommitments::Commitments` (r:1 w:1)
	/// Proof: `EncointerReputationCommitments::Commitments` (`max_values`: None, `max_size`: Some(102), added: 2577, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn drip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `732`
		//  Estimated: `12838`
		// Minimum execution time: 81_307_000 picoseconds.
		Weight::from_parts(83_562_000, 0)
			.saturating_add(Weight::from_parts(0, 12838))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `EncointerFaucet::Faucets` (r:1 w:1)
	/// Proof: `EncointerFaucet::Faucets` (`max_values`: None, `max_size`: Some(9373), added: 11848, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Reserves` (r:1 w:0)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn dissolve_faucet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `432`
		//  Estimated: `12838`
		// Minimum execution time: 65_918_000 picoseconds.
		Weight::from_parts(67_333_000, 0)
			.saturating_add(Weight::from_parts(0, 12838))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `EncointerFaucet::Faucets` (r:1 w:1)
	/// Proof: `EncointerFaucet::Faucets` (`max_values`: None, `max_size`: Some(9373), added: 11848, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Reserves` (r:1 w:0)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	fn close_faucet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `343`
		//  Estimated: `12838`
		// Minimum execution time: 61_398_000 picoseconds.
		Weight::from_parts(62_288_000, 0)
			.saturating_add(Weight::from_parts(0, 12838))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `EncointerFaucet::ReserveAmount` (r:0 w:1)
	/// Proof: `EncointerFaucet::ReserveAmount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_reserve_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_507_000 picoseconds.
		Weight::from_parts(6_776_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
