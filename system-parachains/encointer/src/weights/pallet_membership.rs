
//! Autogenerated weights for `pallet_membership`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("encointer-rococo-local-dev"), DB CACHE: 1024

// Executed Command:
// target/release/encointer-collator
// benchmark
// pallet
// --chain=encointer-rococo-local-dev
// --steps=50
// --repeat=20
// --pallet=pallet_membership
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=polkadot-parachains/encointer-runtime/src/weights/pallet_membership.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_membership`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	/// Storage: Membership Members (r:1 w:1)
	/// Proof: Membership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Collective Proposals (r:1 w:0)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Members (r:0 w:1)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 99]`.
	fn add_member(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `102 + m * (64 ±0)`
		//  Estimated: `4687 + m * (64 ±0)`
		// Minimum execution time: 16_503_000 picoseconds.
		Weight::from_parts(22_233_968, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Membership Members (r:1 w:1)
	/// Proof: Membership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Collective Proposals (r:1 w:0)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Prime (r:1 w:0)
	/// Proof: Membership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Collective Members (r:0 w:1)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[2, 100]`.
	fn remove_member(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206 + m * (64 ±0)`
		//  Estimated: `4687 + m * (64 ±0)`
		// Minimum execution time: 16_035_000 picoseconds.
		Weight::from_parts(16_899_394, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 569
			.saturating_add(Weight::from_parts(26_212, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Membership Members (r:1 w:1)
	/// Proof: Membership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Collective Proposals (r:1 w:0)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Prime (r:1 w:0)
	/// Proof: Membership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Collective Members (r:0 w:1)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[2, 100]`.
	fn swap_member(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206 + m * (64 ±0)`
		//  Estimated: `4687 + m * (64 ±0)`
		// Minimum execution time: 15_874_000 picoseconds.
		Weight::from_parts(16_897_269, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 463
			.saturating_add(Weight::from_parts(37_531, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Membership Members (r:1 w:1)
	/// Proof: Membership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Collective Proposals (r:1 w:0)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Prime (r:1 w:0)
	/// Proof: Membership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Collective Members (r:0 w:1)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 100]`.
	fn reset_member(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206 + m * (64 ±0)`
		//  Estimated: `4687 + m * (64 ±0)`
		// Minimum execution time: 15_407_000 picoseconds.
		Weight::from_parts(17_311_131, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 892
			.saturating_add(Weight::from_parts(118_312, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Membership Members (r:1 w:1)
	/// Proof: Membership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Collective Proposals (r:1 w:0)
	/// Proof Skipped: Collective Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Membership Prime (r:1 w:1)
	/// Proof: Membership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Collective Members (r:0 w:1)
	/// Proof Skipped: Collective Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 100]`.
	fn change_key(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206 + m * (64 ±0)`
		//  Estimated: `4687 + m * (64 ±0)`
		// Minimum execution time: 16_110_000 picoseconds.
		Weight::from_parts(17_298_112, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 705
			.saturating_add(Weight::from_parts(37_102, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Membership Members (r:1 w:0)
	/// Proof: Membership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Membership Prime (r:0 w:1)
	/// Proof: Membership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 100]`.
	fn set_prime(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32 + m * (32 ±0)`
		//  Estimated: `4687 + m * (32 ±0)`
		// Minimum execution time: 5_906_000 picoseconds.
		Weight::from_parts(6_230_458, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 230
			.saturating_add(Weight::from_parts(7_792, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: Membership Prime (r:0 w:1)
	/// Proof: Membership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Collective Prime (r:0 w:1)
	/// Proof Skipped: Collective Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 100]`.
	fn clear_prime(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_695_000 picoseconds.
		Weight::from_parts(2_946_268, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
