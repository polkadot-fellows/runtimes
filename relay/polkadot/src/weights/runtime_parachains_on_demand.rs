// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `runtime_parachains::on_demand`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-08-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `f801d3746784`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/polkadot-runtime/polkadot_runtime.wasm
// --pallet=runtime_parachains::on_demand
// --header=/_work/fellowship-001/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./relay/polkadot/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `runtime_parachains::on_demand`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> runtime_parachains::on_demand::WeightInfo for WeightInfo<T> {
	/// Storage: `OnDemand::QueueStatus` (r:1 w:1)
	/// Proof: `OnDemand::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `OnDemand::Revenue` (r:1 w:1)
	/// Proof: `OnDemand::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::ParaIdAffinity` (r:1 w:0)
	/// Proof: `OnDemand::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::FreeEntries` (r:1 w:1)
	/// Proof: `OnDemand::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 9999]`.
	fn place_order_keep_alive(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132 + s * (8 ±0)`
		//  Estimated: `3595 + s * (8 ±0)`
		// Minimum execution time: 54_240_000 picoseconds.
		Weight::from_parts(70_662_870, 0)
			.saturating_add(Weight::from_parts(0, 3595))
			// Standard Error: 102
			.saturating_add(Weight::from_parts(17_186, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
	}
	/// Storage: `OnDemand::QueueStatus` (r:1 w:1)
	/// Proof: `OnDemand::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `OnDemand::Revenue` (r:1 w:1)
	/// Proof: `OnDemand::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::ParaIdAffinity` (r:1 w:0)
	/// Proof: `OnDemand::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::FreeEntries` (r:1 w:1)
	/// Proof: `OnDemand::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 9999]`.
	fn place_order_allow_death(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132 + s * (8 ±0)`
		//  Estimated: `3595 + s * (8 ±0)`
		// Minimum execution time: 53_499_000 picoseconds.
		Weight::from_parts(70_955_030, 0)
			.saturating_add(Weight::from_parts(0, 3595))
			// Standard Error: 114
			.saturating_add(Weight::from_parts(17_246, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
	}
	/// Storage: `OnDemand::QueueStatus` (r:1 w:1)
	/// Proof: `OnDemand::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::Credits` (r:1 w:1)
	/// Proof: `OnDemand::Credits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::Revenue` (r:1 w:1)
	/// Proof: `OnDemand::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::ParaIdAffinity` (r:1 w:0)
	/// Proof: `OnDemand::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::FreeEntries` (r:1 w:1)
	/// Proof: `OnDemand::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 9999]`.
	fn place_order_with_credits(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166 + s * (8 ±0)`
		//  Estimated: `3629 + s * (8 ±0)`
		// Minimum execution time: 27_910_000 picoseconds.
		Weight::from_parts(39_127_195, 0)
			.saturating_add(Weight::from_parts(0, 3629))
			// Standard Error: 98
			.saturating_add(Weight::from_parts(17_277, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
	}
}
