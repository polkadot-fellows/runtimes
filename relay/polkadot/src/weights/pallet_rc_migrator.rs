// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_rc_migrator`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 51.0.0
//! DATE: 2025-10-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `7747d1d7a8d4`, CPU: `AMD EPYC 7443 24-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/polkadot-runtime/polkadot_runtime.wasm
// --pallet=pallet_rc_migrator
// --header=/_work/ibp-cr/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./relay/polkadot/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_rc_migrator`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_rc_migrator::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::RcAccounts` (r:1 w:0)
	/// Proof: `RcMigrator::RcAccounts` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:0)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(157), added: 2632, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::RcMigratedBalance` (r:1 w:1)
	/// Proof: `RcMigrator::RcMigratedBalance` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn withdraw_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `496`
		//  Estimated: `6196`
		// Minimum execution time: 80_422_000 picoseconds.
		Weight::from_parts(83_152_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:1)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	fn force_set_stage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 25_161_000 picoseconds.
		Weight::from_parts(26_861_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:1)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::WarmUpPeriod` (r:0 w:1)
	/// Proof: `RcMigrator::WarmUpPeriod` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::CoolOffPeriod` (r:0 w:1)
	/// Proof: `RcMigrator::CoolOffPeriod` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	fn schedule_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 26_371_000 picoseconds.
		Weight::from_parts(27_310_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:1)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::WarmUpPeriod` (r:1 w:0)
	/// Proof: `RcMigrator::WarmUpPeriod` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	fn start_data_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `53`
		//  Estimated: `2693`
		// Minimum execution time: 29_481_000 picoseconds.
		Weight::from_parts(30_191_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `XcmPallet::QueryCounter` (r:1 w:1)
	/// Proof: `XcmPallet::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RcMigrator::PendingXcmMessages` (r:1 w:1)
	/// Proof: `RcMigrator::PendingXcmMessages` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RcMigrator::CounterForPendingXcmMessages` (r:1 w:1)
	/// Proof: `RcMigrator::CounterForPendingXcmMessages` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `XcmPallet::Queries` (r:0 w:1)
	/// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RcMigrator::PendingXcmQueries` (r:0 w:1)
	/// Proof: `RcMigrator::PendingXcmQueries` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn send_chunked_xcm_and_track() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183`
		//  Estimated: `3648`
		// Minimum execution time: 578_387_000 picoseconds.
		Weight::from_parts(595_698_000, 0)
			.saturating_add(Weight::from_parts(0, 3648))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `RcMigrator::PendingXcmQueries` (r:1 w:1)
	/// Proof: `RcMigrator::PendingXcmQueries` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::PendingXcmMessages` (r:1 w:1)
	/// Proof: `RcMigrator::PendingXcmMessages` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RcMigrator::CounterForPendingXcmMessages` (r:1 w:1)
	/// Proof: `RcMigrator::CounterForPendingXcmMessages` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn receive_query_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167`
		//  Estimated: `3632`
		// Minimum execution time: 40_651_000 picoseconds.
		Weight::from_parts(41_911_000, 0)
			.saturating_add(Weight::from_parts(0, 3632))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `RcMigrator::PendingXcmQueries` (r:1 w:1)
	/// Proof: `RcMigrator::PendingXcmQueries` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::PendingXcmMessages` (r:1 w:0)
	/// Proof: `RcMigrator::PendingXcmMessages` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::QueryCounter` (r:1 w:1)
	/// Proof: `XcmPallet::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::Queries` (r:0 w:1)
	/// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn resend_xcm() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `3811`
		// Minimum execution time: 68_272_000 picoseconds.
		Weight::from_parts(71_892_000, 0)
			.saturating_add(Weight::from_parts(0, 3811))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `RcMigrator::UnprocessedMsgBuffer` (r:1 w:1)
	/// Proof: `RcMigrator::UnprocessedMsgBuffer` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_unprocessed_msg_buffer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `1489`
		// Minimum execution time: 12_060_000 picoseconds.
		Weight::from_parts(12_891_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RcMigrator::AhUmpQueuePriorityConfig` (r:1 w:0)
	/// Proof: `RcMigrator::AhUmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::BookStateFor` (r:1 w:0)
	/// Proof: `MessageQueue::BookStateFor` (`max_values`: None, `max_size`: Some(55), added: 2530, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::ServiceHead` (r:0 w:1)
	/// Proof: `MessageQueue::ServiceHead` (`max_values`: Some(1), `max_size`: Some(6), added: 501, mode: `MaxEncodedLen`)
	fn force_ah_ump_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `3520`
		// Minimum execution time: 14_951_000 picoseconds.
		Weight::from_parts(15_531_000, 0)
			.saturating_add(Weight::from_parts(0, 3520))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RcMigrator::AhUmpQueuePriorityConfig` (r:1 w:1)
	/// Proof: `RcMigrator::AhUmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	fn set_ah_ump_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `1494`
		// Minimum execution time: 11_870_000 picoseconds.
		Weight::from_parts(12_401_000, 0)
			.saturating_add(Weight::from_parts(0, 1494))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::RcAccounts` (r:1 w:1)
	/// Proof: `RcMigrator::RcAccounts` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::CounterForRcAccounts` (r:1 w:1)
	/// Proof: `RcMigrator::CounterForRcAccounts` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::Manager` (r:1 w:1)
	/// Proof: `RcMigrator::Manager` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `56`
		//  Estimated: `3593`
		// Minimum execution time: 22_561_000 picoseconds.
		Weight::from_parts(23_701_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
