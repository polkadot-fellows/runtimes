// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `e02ffa3c83d3`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/staging-kusama-runtime/staging_kusama_runtime.wasm
// --pallet=pallet_multisig
// --header=/_work/fellowship-001/runtimes/runtimes/.github/scripts/cmd/file_header.txt
// --output=./relay/kusama/src/weights
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 28_560_000 picoseconds.
		Weight::from_parts(30_458_390, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			// Standard Error: 21
			.saturating_add(Weight::from_parts(2_870, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 59_470_000 picoseconds.
		Weight::from_parts(48_832_263, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 2_109
			.saturating_add(Weight::from_parts(138_922, 0).saturating_mul(s.into()))
			// Standard Error: 20
			.saturating_add(Weight::from_parts(2_541, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320`
		//  Estimated: `6811`
		// Minimum execution time: 37_600_000 picoseconds.
		Weight::from_parts(26_504_657, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 3_322
			.saturating_add(Weight::from_parts(141_804, 0).saturating_mul(s.into()))
			// Standard Error: 32
			.saturating_add(Weight::from_parts(2_740, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430 + s * (33 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 66_810_000 picoseconds.
		Weight::from_parts(50_331_879, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 4_790
			.saturating_add(Weight::from_parts(224_538, 0).saturating_mul(s.into()))
			// Standard Error: 46
			.saturating_add(Weight::from_parts(2_877, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 41_860_000 picoseconds.
		Weight::from_parts(42_373_907, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 5_477
			.saturating_add(Weight::from_parts(216_125, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `320`
		//  Estimated: `6811`
		// Minimum execution time: 22_670_000 picoseconds.
		Weight::from_parts(24_187_764, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 934
			.saturating_add(Weight::from_parts(131_347, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `492 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 41_849_000 picoseconds.
		Weight::from_parts(45_410_503, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 5_426
			.saturating_add(Weight::from_parts(151_897, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn poke_deposit(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `492 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 39_991_000 picoseconds.
		Weight::from_parts(40_512_047, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 5_168
			.saturating_add(Weight::from_parts(202_400, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
